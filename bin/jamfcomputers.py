import jamf_pro_addon_for_splunk_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi



import input_module_jamfcomputers as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_jamfcomputers.py
'''
class ModInputjamfcomputers(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputjamfcomputers, self).__init__("jamf_pro_addon_for_splunk", "jamfcomputers", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputjamfcomputers, self).get_scheme()
        scheme.title = ("JamfComputers")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("name_of_the_modular_input", title="Name of the Modular Input",
                                         description="",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("jss_url", title="JSS URL",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("jss_username", title="Username",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("jss_password", title="Password",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("excludeNoneManaged", title="Exclude Non Managed Devices",
                                         description="If a device is not managed Exclude it",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("sections", title="Sections",
                                         description="General and User_and_Location are included by default: Excluded are Fonts, Services, Package Receipts, Content Caching, iBeacons, Plugins, and Attachments.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("days_since_contact", title="Days Since Contact",
                                         description="Exclude devices that haven\'t been contacted in the above days. Suggest 7, 14, 30, 90 days. Refer to your own environment. 0 = Unlimited",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("event_time_format", title="Event Time format",
                                         description="Write the \"TIME\" field as either when the device inventoried, was last contacted, or when the Script runs",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("host_as_device_name", title="Host as Device Name",
                                         description="Writes the devices name as the Host Name.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("use_proxy", title="Use proxy",
                                         description="Use the System or Per-App Proxy",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "JAMF-Pro-addon-for-splunk"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("excludeNoneManaged")
        checkbox_fields.append("host_as_device_name")
        checkbox_fields.append("use_proxy")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputjamfcomputers().run(sys.argv)
    sys.exit(exitcode)
